{"version":3,"sources":["commponents/User.js","commponents/TodoItem.js","commponents/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","react_default","a","createElement","className","href","concat","this","props","email","name","React","Component","TodoItem","person","users","find","item","id","title","commponents_User","completed","TodoList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","request","loaded","todos","loadTodos","bind","assertThisInitialized","sortTodos","setState","str","_this2","sort","b","localeCompare","toString","_this3","xhrTodos","XMLHttpRequest","xhrUsers","open","addEventListener","parsedTodos","JSON","parse","response","parsedUsers","send","_this4","onClick","map","todo","commponents_TodoItem","key","userId","App","commponents_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.593f6684.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass User extends React.Component {\r\n  render () {\r\n    return (\r\n      <td><a className=\"name\" href={`mailto:${this.props.email}`}>{this.props.name}</a></td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from './User';\r\n\r\nfunction TodoItem(props) {\r\n\r\n\r\n  const person = props.users.find(item => props.id === item.id);\r\n    return (\r\n      <tr>\r\n        <td>{props.title}</td>\r\n        <User name={person.name} email={person.email}/>\r\n        <td className={props.completed ? 'completed' : 'active'}>{props.completed ? 'completed' : 'active'}</td>\r\n\r\n      </tr>\r\n    );\r\n\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      request: false,\r\n      loaded: false,\r\n      todos: null,\r\n      users: null\r\n    };\r\n\r\n    this.loadTodos = this.loadTodos.bind(this);\r\n    this.sortTodos = this.sortTodos.bind(this);\r\n  }\r\n\r\n  loadTodos() {\r\n    this.setState ({\r\n      request: true\r\n    })\r\n  }\r\n\r\n  sortTodos(str) {\r\n    this.str =  str;\r\n\r\n    if (this.str === 'title') {\r\n      this.setState((state) => ({\r\n        todos: state.todos.sort((a, b) => a[this.str].localeCompare(b[this.str]))\r\n      }))\r\n    }\r\n\r\n    if (this.str === 'userId') {\r\n\r\n      this.setState((state) => ({\r\n        todos: state.todos.sort((a, b) => a[this.str].toString().localeCompare(b[this.str].toString()))\r\n      }))\r\n    }\r\n\r\n    if (this.str === 'completed') {\r\n      this.setState((state) => ({\r\n        todos: state.todos.sort((a, b) => a[this.str].toString().localeCompare(b[this.str].toString()))\r\n      }))\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const xhrTodos = new XMLHttpRequest();\r\n    const xhrUsers = new XMLHttpRequest();\r\n    xhrTodos.open('GET', 'https://jsonplaceholder.typicode.com/todos');\r\n    xhrUsers.open('GET', 'https://jsonplaceholder.typicode.com/users');\r\n    xhrTodos.addEventListener('load', () => {\r\n      const parsedTodos = JSON.parse(xhrTodos.response);\r\n      xhrUsers.addEventListener('load', () => {\r\n        const parsedUsers = JSON.parse(xhrUsers.response);\r\n        this.setState({\r\n          loaded: true,\r\n          todos: parsedTodos,\r\n          users: parsedUsers\r\n        })\r\n      })\r\n      xhrUsers.send();\r\n    })\r\n    xhrTodos.send();\r\n    }\r\n\r\n  render() {\r\n    if (!this.state.request) {\r\n      return <div className=\"button\">\r\n        \r\n        <button onClick={this.loadTodos}>Download</button>\r\n      </div>\r\n    } else if (this.state.loaded) {\r\n      return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th title=\"click to sort\" onClick={this.sortTodos.bind(this, 'title')}>Todos</th>\r\n            <th title=\"click to sort\" onClick={this.sortTodos.bind(this, 'userId')}>Name</th>\r\n            <th title=\"click to sort\" onClick={this.sortTodos.bind(this, 'completed')}>Completed</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{this.state.todos.map(todo => <TodoItem title={todo.title} completed={todo.completed} users={this.state.users} key={todo.title} id={todo.userId}/>)}</tbody>\r\n\r\n      </table>\r\n      )\r\n\r\n    } else {\r\n      return <div>Loading...</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './commponents/TodoList';\n\nfunction App() {\n    return <TodoList />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}